#! /usr/bin/env ruby

require "pg"
require "io/console"

# CLI Class Responsibility - parsing and processing arguments passed to the CLI; Calling appropriate methods on ExpenseData objects:

class CLI
	attr_reader :database
	
	def initialize
		@database = ExpenseData.new
	end

  def self.run(args)
    CLI.new.run(args)
  end

	def run(args)
	  case args[0]
		when 'list' then database.list_expenses
		when 'add' 
      if args.size <= 2 
	      abort "Argument missing: you must provide both an amount and a memo note."
      else 
        database.add_expense(args[1..-1])
      end
    when 'search' 
      if args.size < 2
        abort "Search parameter missing."
      else 
        database.search_expenses(args[1.. -1])
      end
    when 'delete'
      if args[1].nil? 
        abort "id value missing."
      elsif args[1].to_i.to_s != args[1]
        abort "id must be an integer."
      else
        database.delete_expense(args[1])
      end
    when 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = STDIN.getch
      database.delete_all_expenses if answer == "y"
		else 
      display_help
    end
	end

  def display_help 
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

# ExpenseData Responsibility - Communicate with Database / Format and Display results back to Terminal:

class ExpenseData
	attr_reader :connection
	
	def initialize
	  @connection = PG.connect(dbname: "expenses")
	end

  def list_expenses 
    result = connection.exec("SELECT * FROM expenses ORDER BY created_on;")
    display_count(result)
    display_expenses(result) if result.ntuples > 0

	end

	def add_expense(args)
	  amount = args[0]
	  memo = args[1..-1].join(" ")
	
	  sql = "INSERT INTO expenses(amount, memo, created_on)
	            VALUES ($1, $2, DEFAULT);"
	  connection.exec_params(sql, [amount, memo])
	  puts "\"#{memo}\" added to expenses."
	end

  def search_expenses(args)
    search_parameters = "%#{args.join(" ")}%"

    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = connection.exec_params(sql, [search_parameters])
    display_count(result)
    display_expenses(result)
  end

  def delete_expense(id)
    query = "SELECT * FROM expenses WHERE id = $1"
    result = connection.exec_params(query, [id])

    sql = "DELETE FROM expenses WHERE id = $1"
    if result.ntuples.zero?
      puts "There is no expense with the id '#{id}'."
    else 
     connection.exec_params(sql, [id])
      puts "The following expense has been deleted:"
      display_expenses(result)
    end
  end

  # Remove all expenses from the system. Prompt user for confirmation before deletion.

  def delete_all_expenses
    sql = "DELETE FROM expenses;"
    connection.exec(sql) 
    puts "All expenses have been deleted."
  end

  private 

  def display_expenses(result)
    result.each do |tuple|
	    columns = [ tuple["id"].rjust(3),
                tuple["created_on"].rjust(10),
                tuple["amount"].rjust(10),
                tuple["memo"] ]
              
	    puts columns.join(" | ") 
	  end
   puts "-" * 50

   total_amount = result.field_values("amount").map(&:to_f).sum

   puts "Total #{total_amount.to_s.rjust(23)}"
  end

  def display_count(result)
    count = result.ntuples
    case count 
    when 0 then puts "There are no expenses."
    when 1 then puts "There is #{count} expense."
    else puts "There are #{count} expenses."
    end 
  end
end

# Run application:

CLI.run(ARGV)